@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

<div>
    <h4>@Localizer["Item"]:@Model.Name </h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            <label>@Localizer["Image"]  </label>
        </dt>
        <dd class="col-sm-10">
            @*<img src="@Model.UrlImg" alt="Image" style="width: 150px; height: 220px;" />*@
        </dd>
        <dt class="col-sm-2">
            <label>@Localizer["Description"]</label>
        </dt>
        <dd class="col-sm-10">
            <label>@Model.Description</label>
        </dd>
    </dl>
</div>

<span id="counts">@ViewBag.Likes</span>

<button class="btn btn-body" id="likeBtn">@Localizer["Like"]</button>

<div class="container">
    <div class="row bootstrap snippets bootdeys">
        <div class="col-md-8 col-sm-12">
            <div class="comment-wrapper">
                <div class="panel panel-info">
                    <div class="panel-body">
                        <textarea class="form-control" placeholder="@Localizer["LeaveComment"]" rows="3" id="comment"></textarea>
                        <br>
                        <button type="button" class="btn btn-body" id="commentBtn">@Localizer["Comment"]</button>
                        <div class="clearfix"></div>
                        <hr>
                        <ul class="media-list" id="comments">
                            @if (ViewBag.Comments != null)
                @foreach (var comment in ViewBag.Comments)
                {
<li class="media">

    <div class="media-body">
        <strong class="text-success">@comment.UserId</strong>
        <p>@comment.messenge</p>
    </div>
</li>
}
                        </ul>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>


<script src="~/js/microsoft/signalr/dist/browser/signalr.min.js"></script>
<script>
    const hubConnection = new signalR.HubConnectionBuilder()
        .withUrl("/ReactionsHub")
        .build();

    hubConnection.on('getComment', function (data) {
        var div = document.getElementById('comments');
        while (div.firstChild) {
            div.removeChild(div.firstChild);
        }

        for (i = 0; i < data.length; i++) {
            var user = data[i].userId;
            var messenge = data[i].messenge;
          /*  var src = data[i].urlImg;*/
            var ul = document.getElementById("comments");
            var li = document.createElement("li")
            var div = document.createElement("div")
  /*          var img = document.createElement("img")*/
            var strong = document.createElement("strong")
            var p = document.createElement("p")
            strong.appendChild(document.createTextNode(user));
            strong.setAttribute("class", "text-success");
            img.setAttribute("class", "avatar");
            img.setAttribute("src", src);
            p.append(messenge);
            div.appendChild(strong);
            div.appendChild(p);
            div.setAttribute("class", "media-body")
            li.appendChild(img);
            li.appendChild(div);
            li.setAttribute("class", "media")
            ul.appendChild(li);
        }
    });

    hubConnection.on('getLike', function (data) {
        var counts = document.getElementById("counts");
        counts.textContent = data;
    });

    hubConnection.on('getConnected', function (data) {
        let id = "@Model.Id";
        hubConnection.invoke("GetGroup", id);
    });
    hubConnection.on('getDisConnected', function (data) {
        let id = "@Model.Id";
        hubConnection.invoke("DelGroup", id);
    });
    document.getElementById("commentBtn").addEventListener("click", function (e) {
        let comment = document.getElementById("comment").value;
        let id = "@Model.Id";
        let name="@User.Identity.Name";
        hubConnection.invoke("Comment", comment, id, name);
    });

    document.getElementById("likeBtn").addEventListener("click", function (e) {
        let id = "@Model.Id";
        let name="@User.Identity.Name";
        hubConnection.invoke("Like", id, name);
    });

    hubConnection.start();
</script>
